// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DownloadClusterKubeconfigHandlerFunc turns a function with the right signature into a download cluster kubeconfig handler
type DownloadClusterKubeconfigHandlerFunc func(DownloadClusterKubeconfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadClusterKubeconfigHandlerFunc) Handle(params DownloadClusterKubeconfigParams) middleware.Responder {
	return fn(params)
}

// DownloadClusterKubeconfigHandler interface for that can handle valid download cluster kubeconfig params
type DownloadClusterKubeconfigHandler interface {
	Handle(DownloadClusterKubeconfigParams) middleware.Responder
}

// NewDownloadClusterKubeconfig creates a new http.Handler for the download cluster kubeconfig operation
func NewDownloadClusterKubeconfig(ctx *middleware.Context, handler DownloadClusterKubeconfigHandler) *DownloadClusterKubeconfig {
	return &DownloadClusterKubeconfig{Context: ctx, Handler: handler}
}

/*DownloadClusterKubeconfig swagger:route GET /clusters/{cluster_id}/downloads/kubeconfig installer downloadClusterKubeconfig

Downloads the kubeconfig file for this cluster.

*/
type DownloadClusterKubeconfig struct {
	Context *middleware.Context
	Handler DownloadClusterKubeconfigHandler
}

func (o *DownloadClusterKubeconfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDownloadClusterKubeconfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
