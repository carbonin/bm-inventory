// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/filanov/bm-inventory/models"
)

// InstallHostOKCode is the HTTP code returned for type InstallHostOK
const InstallHostOKCode int = 200

/*InstallHostOK Success.

swagger:response installHostOK
*/
type InstallHostOK struct {
}

// NewInstallHostOK creates InstallHostOK with default headers values
func NewInstallHostOK() *InstallHostOK {

	return &InstallHostOK{}
}

// WriteResponse to the client
func (o *InstallHostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// InstallHostBadRequestCode is the HTTP code returned for type InstallHostBadRequest
const InstallHostBadRequestCode int = 400

/*InstallHostBadRequest Error.

swagger:response installHostBadRequest
*/
type InstallHostBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInstallHostBadRequest creates InstallHostBadRequest with default headers values
func NewInstallHostBadRequest() *InstallHostBadRequest {

	return &InstallHostBadRequest{}
}

// WithPayload adds the payload to the install host bad request response
func (o *InstallHostBadRequest) WithPayload(payload *models.Error) *InstallHostBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the install host bad request response
func (o *InstallHostBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InstallHostBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InstallHostNotFoundCode is the HTTP code returned for type InstallHostNotFound
const InstallHostNotFoundCode int = 404

/*InstallHostNotFound Error.

swagger:response installHostNotFound
*/
type InstallHostNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInstallHostNotFound creates InstallHostNotFound with default headers values
func NewInstallHostNotFound() *InstallHostNotFound {

	return &InstallHostNotFound{}
}

// WithPayload adds the payload to the install host not found response
func (o *InstallHostNotFound) WithPayload(payload *models.Error) *InstallHostNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the install host not found response
func (o *InstallHostNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InstallHostNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InstallHostInternalServerErrorCode is the HTTP code returned for type InstallHostInternalServerError
const InstallHostInternalServerErrorCode int = 500

/*InstallHostInternalServerError Error.

swagger:response installHostInternalServerError
*/
type InstallHostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInstallHostInternalServerError creates InstallHostInternalServerError with default headers values
func NewInstallHostInternalServerError() *InstallHostInternalServerError {

	return &InstallHostInternalServerError{}
}

// WithPayload adds the payload to the install host internal server error response
func (o *InstallHostInternalServerError) WithPayload(payload *models.Error) *InstallHostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the install host internal server error response
func (o *InstallHostInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InstallHostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
