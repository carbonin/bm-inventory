// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeregisterNodeHandlerFunc turns a function with the right signature into a deregister node handler
type DeregisterNodeHandlerFunc func(DeregisterNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeregisterNodeHandlerFunc) Handle(params DeregisterNodeParams) middleware.Responder {
	return fn(params)
}

// DeregisterNodeHandler interface for that can handle valid deregister node params
type DeregisterNodeHandler interface {
	Handle(DeregisterNodeParams) middleware.Responder
}

// NewDeregisterNode creates a new http.Handler for the deregister node operation
func NewDeregisterNode(ctx *middleware.Context, handler DeregisterNodeHandler) *DeregisterNode {
	return &DeregisterNode{Context: ctx, Handler: handler}
}

/*DeregisterNode swagger:route DELETE /nodes/{node_id} inventory deregisterNode

Deregister OpenShift bare metal node

*/
type DeregisterNode struct {
	Context *middleware.Context
	Handler DeregisterNodeHandler
}

func (o *DeregisterNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeregisterNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
