// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectivityRemoteNode connectivity remote node
//
// swagger:model connectivity-remote-node
type ConnectivityRemoteNode struct {

	// l2 connectivity
	L2Connectivity []*L2Connectivity `json:"l2-connectivity"`

	// l3 connectivity
	L3Connectivity []*L3Connectivity `json:"l3-connectivity"`

	// node id
	// Format: uuid
	NodeID strfmt.UUID `json:"node-id,omitempty"`
}

// Validate validates this connectivity remote node
func (m *ConnectivityRemoteNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateL2Connectivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateL3Connectivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectivityRemoteNode) validateL2Connectivity(formats strfmt.Registry) error {

	if swag.IsZero(m.L2Connectivity) { // not required
		return nil
	}

	for i := 0; i < len(m.L2Connectivity); i++ {
		if swag.IsZero(m.L2Connectivity[i]) { // not required
			continue
		}

		if m.L2Connectivity[i] != nil {
			if err := m.L2Connectivity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("l2-connectivity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectivityRemoteNode) validateL3Connectivity(formats strfmt.Registry) error {

	if swag.IsZero(m.L3Connectivity) { // not required
		return nil
	}

	for i := 0; i < len(m.L3Connectivity); i++ {
		if swag.IsZero(m.L3Connectivity[i]) { // not required
			continue
		}

		if m.L3Connectivity[i] != nil {
			if err := m.L3Connectivity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("l3-connectivity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectivityRemoteNode) validateNodeID(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeID) { // not required
		return nil
	}

	if err := validate.FormatOf("node-id", "body", "uuid", m.NodeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectivityRemoteNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectivityRemoteNode) UnmarshalBinary(b []byte) error {
	var res ConnectivityRemoteNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
