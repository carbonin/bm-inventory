// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/filanov/bm-inventory/models"
)

// NewRegisterNodeParams creates a new RegisterNodeParams object
// with the default values initialized.
func NewRegisterNodeParams() *RegisterNodeParams {
	var ()
	return &RegisterNodeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterNodeParamsWithTimeout creates a new RegisterNodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterNodeParamsWithTimeout(timeout time.Duration) *RegisterNodeParams {
	var ()
	return &RegisterNodeParams{

		timeout: timeout,
	}
}

// NewRegisterNodeParamsWithContext creates a new RegisterNodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterNodeParamsWithContext(ctx context.Context) *RegisterNodeParams {
	var ()
	return &RegisterNodeParams{

		Context: ctx,
	}
}

// NewRegisterNodeParamsWithHTTPClient creates a new RegisterNodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterNodeParamsWithHTTPClient(client *http.Client) *RegisterNodeParams {
	var ()
	return &RegisterNodeParams{
		HTTPClient: client,
	}
}

/*RegisterNodeParams contains all the parameters to send to the API endpoint
for the register node operation typically these are written to a http.Request
*/
type RegisterNodeParams struct {

	/*NewNodeParams
	  New node parameters

	*/
	NewNodeParams *models.NodeCreateParams

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register node params
func (o *RegisterNodeParams) WithTimeout(timeout time.Duration) *RegisterNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register node params
func (o *RegisterNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register node params
func (o *RegisterNodeParams) WithContext(ctx context.Context) *RegisterNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register node params
func (o *RegisterNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register node params
func (o *RegisterNodeParams) WithHTTPClient(client *http.Client) *RegisterNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register node params
func (o *RegisterNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewNodeParams adds the newNodeParams to the register node params
func (o *RegisterNodeParams) WithNewNodeParams(newNodeParams *models.NodeCreateParams) *RegisterNodeParams {
	o.SetNewNodeParams(newNodeParams)
	return o
}

// SetNewNodeParams adds the newNodeParams to the register node params
func (o *RegisterNodeParams) SetNewNodeParams(newNodeParams *models.NodeCreateParams) {
	o.NewNodeParams = newNodeParams
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NewNodeParams != nil {
		if err := r.SetBodyParam(o.NewNodeParams); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
