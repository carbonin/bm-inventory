// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeregisterNodeReader is a Reader for the DeregisterNode structure.
type DeregisterNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeregisterNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeregisterNodeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeregisterNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeregisterNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeregisterNodeNoContent creates a DeregisterNodeNoContent with default headers values
func NewDeregisterNodeNoContent() *DeregisterNodeNoContent {
	return &DeregisterNodeNoContent{}
}

/*DeregisterNodeNoContent handles this case with default header values.

Node deregistered
*/
type DeregisterNodeNoContent struct {
}

func (o *DeregisterNodeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{node_id}][%d] deregisterNodeNoContent ", 204)
}

func (o *DeregisterNodeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeregisterNodeBadRequest creates a DeregisterNodeBadRequest with default headers values
func NewDeregisterNodeBadRequest() *DeregisterNodeBadRequest {
	return &DeregisterNodeBadRequest{}
}

/*DeregisterNodeBadRequest handles this case with default header values.

Node in use
*/
type DeregisterNodeBadRequest struct {
}

func (o *DeregisterNodeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{node_id}][%d] deregisterNodeBadRequest ", 400)
}

func (o *DeregisterNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeregisterNodeNotFound creates a DeregisterNodeNotFound with default headers values
func NewDeregisterNodeNotFound() *DeregisterNodeNotFound {
	return &DeregisterNodeNotFound{}
}

/*DeregisterNodeNotFound handles this case with default header values.

Node not found
*/
type DeregisterNodeNotFound struct {
}

func (o *DeregisterNodeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{node_id}][%d] deregisterNodeNotFound ", 404)
}

func (o *DeregisterNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
